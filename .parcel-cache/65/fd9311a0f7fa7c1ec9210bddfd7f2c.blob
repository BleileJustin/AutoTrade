function _defineProperty(obj, key, value) {
  if ((key in obj)) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
const apiKey = require("../key/index.js");
const Binance = require("node-binance-api");
const key = apiKey.get("BINANCE_API_KEY");
const secret = apiKey.get("BINANCE_API_SECRET");
class BiAuthClient {
  constructor() {
    _defineProperty(this, "placeOrder", async params => {
      const binance = await new Binance().options({
        APIKEY: key,
        APISECRET: secret
      });
      const order = aClient.placeOrder(params);
      return order;
    });
    _defineProperty(this, "getAvailable", async id => {
      const binance = new Binance().options({
        APIKEY: "10WqAlXEKRc9vTAaDquvwjypeEMgDpdTWVa5NHS89kQUVsvbIgepe7lDCGFfm91k",
        APISECRET: "W98BlIFcm9gypzJwJJ6ROobuc0YTmSuMOa46RxK5C5AzoWsfF6TDDuqXO2PyJXHH",
        useServerTime: true
      });
      await binance.balance((error, balances) => {
        if (error) return console.error(error);
        console.info("balances()", balances);
        console.info("ETH balance: ", balances.VET.available);
      });
    });
  }
}
module.exports = exports = BiAuthClient;
